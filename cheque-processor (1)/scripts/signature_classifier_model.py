import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf

print("üß† CR√âATION DU MOD√àLE DE DEEP LEARNING POUR LA CLASSIFICATION DE SIGNATURES")
print("=" * 75)

# V√©rifier si TensorFlow est disponible
print(f"üìö TensorFlow version: {tf.__version__}")
print(f"üñ•Ô∏è GPU disponible: {'Oui' if tf.config.list_physical_devices('GPU') else 'Non'}")
print()

# D√©finir les param√®tres du mod√®le
IMG_HEIGHT = 150
IMG_WIDTH = 150
BATCH_SIZE = 32
EPOCHS = 15
NUM_CLASSES = 2  # Valide ou Invalide

print(f"üìê Param√®tres du mod√®le:")
print(f"   ‚Ä¢ Taille d'image: {IMG_WIDTH}x{IMG_HEIGHT} pixels")
print(f"   ‚Ä¢ Batch size: {BATCH_SIZE}")
print(f"   ‚Ä¢ Epochs: {EPOCHS}")
print(f"   ‚Ä¢ Classes: {NUM_CLASSES} (Valide/Invalide)")
print()

# Cr√©er le mod√®le CNN
def create_signature_model():
    model = Sequential([
        # Premi√®re couche de convolution
        Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
        MaxPooling2D(2, 2),
        
        # Deuxi√®me couche de convolution
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D(2, 2),
        
        # Troisi√®me couche de convolution
        Conv2D(128, (3, 3), activation='relu'),
        MaxPooling2D(2, 2),
        
        # Aplatir les caract√©ristiques
        Flatten(),
        
        # Couches denses (fully connected)
        Dense(512, activation='relu'),
        Dropout(0.5),  # Pour √©viter le surapprentissage
        Dense(NUM_CLASSES, activation='softmax')  # Sortie: valide ou invalide
    ])
    
    # Compiler le mod√®le
    model.compile(
        optimizer='adam',
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

# Cr√©er le mod√®le
model = create_signature_model()

# Afficher le r√©sum√© du mod√®le
print("üèóÔ∏è ARCHITECTURE DU MOD√àLE:")
print("-" * 40)
model.summary(print_fn=lambda x: print(f"   {x}"))
print()

# Simuler l'entra√Ænement (puisque nous n'avons pas de donn√©es d'entra√Ænement r√©elles)
print("üîÑ SIMULATION DE L'ENTRA√éNEMENT DU MOD√àLE")
print("-" * 40)

# G√©n√©rer des donn√©es d'entra√Ænement synth√©tiques pour la d√©monstration
print("üìä G√©n√©ration de donn√©es synth√©tiques pour la d√©monstration...")
X_train = np.random.rand(500, IMG_HEIGHT, IMG_WIDTH, 3)
y_train = np.random.randint(0, NUM_CLASSES, size=(500,))
y_train_categorical = keras.utils.to_categorical(y_train, NUM_CLASSES)

X_val = np.random.rand(100, IMG_HEIGHT, IMG_WIDTH, 3)
y_val = np.random.randint(0, NUM_CLASSES, size=(100,))
y_val_categorical = keras.utils.to_categorical(y_val, NUM_CLASSES)

print(f"‚úÖ Donn√©es g√©n√©r√©es:")
print(f"   ‚Ä¢ Entra√Ænement: {X_train.shape[0]} images")
print(f"   ‚Ä¢ Validation: {X_val.shape[0]} images")
print()

# Simuler l'entra√Ænement (juste quelques epochs pour la d√©monstration)
print("üèãÔ∏è Entra√Ænement du mod√®le (simulation)...")
history = model.fit(
    X_train, y_train_categorical,
    epochs=3,  # R√©duit pour la d√©monstration
    batch_size=BATCH_SIZE,
    validation_data=(X_val, y_val_categorical),
    verbose=1
)

print("\n‚úÖ Entra√Ænement termin√©!")

# Simuler l'√©valuation du mod√®le
print("\nüìè √âVALUATION DU MOD√àLE")
print("-" * 25)
test_loss, test_acc = model.evaluate(X_val, y_val_categorical, verbose=0)
print(f"   ‚Ä¢ Pr√©cision sur donn√©es de test: {test_acc:.4f}")
print(f"   ‚Ä¢ Perte sur donn√©es de test: {test_loss:.4f}")

# Simuler des pr√©dictions
print("\nüîÆ EXEMPLE DE PR√âDICTIONS")
print("-" * 25)
# G√©n√©rer quelques images de test synth√©tiques
test_images = np.random.rand(5, IMG_HEIGHT, IMG_WIDTH, 3)
predictions = model.predict(test_images)

for i, pred in enumerate(predictions):
    predicted_class = np.argmax(pred)
    confidence = pred[predicted_class]
    status = "VALIDE" if predicted_class == 1 else "INVALIDE"
    print(f"   ‚Ä¢ Image {i+1}: {status} (confiance: {confidence:.2f})")

# Sauvegarder le mod√®le (comment√© car c'est une simulation)
# model.save('signature_classifier.h5')
print("\nüíæ Le mod√®le pourrait √™tre sauvegard√© pour une utilisation future")

print("\nüéØ COMMENT UTILISER CE MOD√àLE DANS LE PROJET")
print("-" * 40)
print("""
1. Entra√Æner le mod√®le avec de vraies images de signatures
2. Sauvegarder le mod√®le entra√Æn√©
3. Cr√©er une API FastAPI/Flask qui:
   - Charge le mod√®le
   - Re√ßoit des images de signatures
   - Pr√©traite les images
   - Fait des pr√©dictions
   - Renvoie les r√©sultats
4. Int√©grer l'API avec l'interface React/Next.js
""")

print("\nüöÄ PROCHAINES √âTAPES")
print("-" * 20)
print("1. Collecter un dataset de signatures valides et invalides")
print("2. Pr√©traiter les images (redimensionnement, normalisation)")
print("3. Entra√Æner le mod√®le sur les vraies donn√©es")
print("4. √âvaluer et ajuster le mod√®le")
print("5. D√©ployer le mod√®le via une API")
print("6. Int√©grer l'API avec l'interface utilisateur")
