import numpy as np
import json
import time
from datetime import datetime

print("üöÄ SIMULATION D'API DE CLASSIFICATION DE SIGNATURES")
print("=" * 50)

class SignatureClassifierAPI:
    def __init__(self):
        print("üîÑ Initialisation de l'API de classification...")
        print("üì¶ Chargement du mod√®le de deep learning (simulation)...")
        time.sleep(1)  # Simuler le chargement du mod√®le
        print("‚úÖ Mod√®le charg√© avec succ√®s!")
        print()
    
    def preprocess_image(self, image_data):
        """Simule le pr√©traitement d'une image"""
        print("üñºÔ∏è Pr√©traitement de l'image:")
        print("   ‚Ä¢ Redimensionnement √† 150x150 pixels")
        print("   ‚Ä¢ Normalisation des valeurs de pixels")
        print("   ‚Ä¢ Augmentation du contraste")
        print("   ‚Ä¢ Extraction de la zone de signature")
        return "image_preprocessed"
    
    def predict(self, image_data, cheque_id):
        """Simule la pr√©diction avec le mod√®le de deep learning"""
        print(f"üîç Analyse de la signature pour le ch√®que #{cheque_id}...")
        
        # Pr√©traiter l'image
        preprocessed = self.preprocess_image(image_data)
        
        # Simuler un d√©lai de traitement
        print("üß† Ex√©cution de l'inf√©rence avec le mod√®le CNN...")
        time.sleep(1.5)
        
        # G√©n√©rer une pr√©diction simul√©e
        # En r√©alit√©, ce serait: prediction = model.predict(preprocessed_image)
        is_valid = np.random.choice([True, False], p=[0.7, 0.3])
        confidence = 0.7 + np.random.random() * 0.25
        
        # G√©n√©rer des scores de confiance simul√©s
        if is_valid:
            valid_score = confidence
            invalid_score = 1 - confidence
            suspect_score = invalid_score * 0.3
        else:
            invalid_score = confidence
            valid_score = 1 - confidence
            suspect_score = valid_score * 0.3
        
        # Normaliser les scores pour qu'ils totalisent 1
        total = valid_score + invalid_score + suspect_score
        valid_score /= total
        invalid_score /= total
        suspect_score /= total
        
        # D√©terminer la pr√©diction finale
        if valid_score > 0.6:
            prediction = "VALIDE"
            risk_level = "FAIBLE"
        elif invalid_score > 0.6:
            prediction = "INVALIDE"
            risk_level = "√âLEV√â"
        else:
            prediction = "SUSPECTE"
            risk_level = "MOYEN"
        
        # Simuler des m√©triques d'analyse suppl√©mentaires
        entropy = np.random.random() * 2
        uncertainty = np.random.random() * 0.5
        
        # Construire la r√©ponse
        result = {
            "prediction": prediction,
            "confidence": float(confidence),
            "confidence_scores": {
                "valide": float(valid_score),
                "invalide": float(invalid_score),
                "suspecte": float(suspect_score)
            },
            "risk_level": risk_level,
            "is_authentic": is_valid,
            "requires_manual_review": confidence < 0.8 or prediction == "SUSPECTE",
            "analysis": {
                "entropy": float(entropy),
                "uncertainty": float(uncertainty),
                "cheque_id": cheque_id,
                "timestamp": datetime.now().isoformat()
            }
        }
        
        print("‚úÖ Analyse termin√©e!")
        print(f"üìä R√©sultat: {prediction} (confiance: {confidence:.2f})")
        print(f"‚ö†Ô∏è Niveau de risque: {risk_level}")
        print(f"üîç R√©vision manuelle requise: {'Oui' if result['requires_manual_review'] else 'Non'}")
        print()
        
        return result

# Simuler l'utilisation de l'API
api = SignatureClassifierAPI()

# Simuler quelques analyses de signatures
test_cheques = ["10000", "10001", "10002", "99999"]
print("üß™ TEST DE L'API AVEC PLUSIEURS CH√àQUES")
print("-" * 40)

results = []
for cheque_id in test_cheques:
    print(f"\n--- Analyse du ch√®que #{cheque_id} ---")
    result = api.predict("image_data_simulation", cheque_id)
    results.append(result)
    print("-" * 30)

# Afficher un r√©sum√© des r√©sultats
print("\nüìã R√âSUM√â DES R√âSULTATS:")
print("-" * 25)
for i, result in enumerate(results):
    cheque_id = test_cheques[i]
    prediction = result["prediction"]
    confidence = result["confidence"]
    risk = result["risk_level"]
    print(f"‚Ä¢ Ch√®que #{cheque_id}: {prediction} (confiance: {confidence:.2f}, risque: {risk})")

print("\nüîå INT√âGRATION AVEC L'INTERFACE")
print("-" * 35)
print("""
Pour int√©grer cette API avec l'interface React/Next.js:

1. Cr√©er un endpoint API dans Next.js:
   ```typescript
   // app/api/analyze-signature/route.ts
   import { NextRequest, NextResponse } from 'next/server';
   
   export async function POST(request: NextRequest) {
     const formData = await request.formData();
     const file = formData.get('image') as File;
     const chequeId = formData.get('chequeId') as string;
     
     // Appeler l'API Python (d√©ploy√©e s√©par√©ment)
     const response = await fetch('http://your-python-api/predict', {
       method: 'POST',
       body: formData
     });
     
     const result = await response.json();
     return NextResponse.json(result);
   }
